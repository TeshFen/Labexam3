def find_matrix_shape(matrix):
    return (len(matrix), len(matrix[0]) if matrix else 0)

2, def  compute_cross_product (x[], y[]):
  for(i range (0, x.len)):
    for(j range (0, y.len)):
       return (x[i],y[j])

3, import numpy as np

def reconstruct_matrices(U,S,V):
    U, S, VT = np.linalg.svd(array)
    return U, np.diag(S), VT

4, import pygame
import sys

A, def main():
    pygame.init()
    screen = pygame.display.set_mode((500, 400))
    pygame.display.set_caption('Canvas Title')
    screen.fill((255, 255, 255))  

    while True:
        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN and event.key == pygame.K_F1:
                pygame.quit()
                sys.exit()
        pygame.display.flip()


B, def draw_red_line(screen):
    pygame.draw.line(screen, (255, 0, 0), (50, 50), (50 + 200, 50), 3)

C,def draw_triangle(screen):
    points = [(100, 100), (150, 50), (200, 100)]
    pygame.draw.polygon(screen, (0, 255, 0), points)  
D, def draw_purple_point(screen):
    pygame.draw.circle(screen, (128, 0, 128), (150, 75), 5)  

5,from OpenGL.GL import *

def draw_purple_triangle():
    glBegin(GL_TRIANGLES)
    glColor3f(0.5, 0, 0.5)   
    glVertex2f(0, 1)
    glVertex2f(-1, -1)
    glVertex2f(1, -1)
    glEnd()

6,  def draw_line(x1, y1, x2, y2):
    glBegin(GL_LINES)
    glColor3f(1,1,1) 
    glVertex2f(x1, y1)
    glVertex2f(x2, y2)
    glEnd()
